#include<iostream>
#include<cstdlib>
#include<iomanip>
#include<cmath>
#include<ctime>
#include"cblas.h"
#include<curand.h>
#include"cublas_v2.h"
#include "lapacke.h"
#include "blas.h"
#include "papi.h"
#include "cula.h"
using namespace std;

void matrixGenerator_gpu(char uplo, double * matrix, double * result, int N, int B);
__global__ void matrixDiagonalizeAndScale(double * matrix, int ld, char uplo, double alpha, double beta);
__global__ void resultVerify_gpu_help(double * realResult, double * testResult,double * diff, int N);
bool resultVerify_gpu(double * realResult, double * testResult, int N, int B);
//void printMatrix_host(double * matrix_host, int N);
//void printMatrix_gpu(double * matrix_gpu, int N);


void test(int c, int N, int B, char uplo, float * real_time, float * proc_time, long long * flpins, float * mflops){
    double * matrix;
    double * result;
    double * temp = new double[N*N]();
    int info = 0;
    cudaMalloc((void**)&matrix,N*N*sizeof(double));
    cudaMalloc((void**)&result,N*N*sizeof(double));
    
    matrixGenerator_gpu(uplo, matrix, result, N, B);
    
    culaInitialize();

    if(PAPI_flops(real_time, proc_time, flpins, mflops)<PAPI_OK){
        cout<<"PAPI ERROR"<<endl;
        return;
    }
    
    culaStatus s = culaDeviceDpotrf(uplo,N,matrix,N);
    
    if( s != culaNoError )
      {
	int info;
	char buf[256];
	info = culaGetErrorInfo();
	culaGetErrorInfoString(s, info, buf, sizeof(buf));

	//cout<<"ERROR:"<<buf<<endl;
      }
   

    if(PAPI_flops( real_time, proc_time, flpins, mflops)<PAPI_OK){
        cout<<"PAPI ERROR"<<endl;
        return;
    }
    
    if(resultVerify_gpu(result,matrix,N,2)){
      //cout<<"Result passed!"<<endl;
    }else{
      //cout<<"Result failed!"<<endl;
    }

    culaShutdown();
    
    delete[] temp;
    cudaFree(matrix);
    cudaFree(result);
    PAPI_shutdown();
}

int main(){
    float real_time = 0.0;
    float proc_time = 0.0;
    long long flpins = 0.0;
    float mflops = 0.0;
    
    float total_real_time = 0.0;
    float total_proc_time = 0.0;
    long long total_flpins = 0.0;
    float total_mflops = 0.0;
    
    int TEST_NUM = 1;
    
    for(int n=50000;n<50001;n*=2){
        for(int i=0;i<TEST_NUM;i++){
            test(0,n,2,'u',&real_time,&proc_time,&flpins,&mflops);
            total_real_time += real_time;
            total_proc_time += proc_time;
            total_flpins += flpins;
            total_mflops += mflops;
        }
        cout<<"CULA:";
        cout<<"Size:"<<n<<"---Real_time:"<<total_real_time/(double)TEST_NUM<<"---"<<"Proc_time:"<<total_proc_time/(double)TEST_NUM<<"---"<<"Total flpins:"<<total_flpins/(double)TEST_NUM<<"---"<<"MFLOPS:"<<total_mflops/(double)TEST_NUM<<endl;
    }
    
}


void matrixGenerator_gpu(char uplo, double * matrix, double * result, int N, int B){
    double a = 10.0;
    //initialize cublas
    cublasHandle_t handle;
    cublasCreate(&handle);
    
    //initialize curand
    curandGenerator_t gen;
    curandCreateGenerator(&gen,CURAND_RNG_PSEUDO_DEFAULT);
    curandSetPseudoRandomGeneratorSeed(gen,10ULL);
    //generate random number in range (0,1] on result using curand
    curandGenerateUniformDouble(gen,result,N*N);
    cudaDeviceSynchronize();
    //  printMatrix_gpu(result,N);
    matrixDiagonalizeAndScale<<<dim3(N/B,N/B),dim3(B,B)>>>(result, N, uplo, a,1);
    cudaDeviceSynchronize();
    //printMatrix_gpu(result,N);
    //do matrix-matrix multiplcation using cublas
    cudaMemset(matrix,0,N*N*sizeof(double));
    
    
    double alpha = 1.0;
    double beta = 1.0;
    if(uplo == 'u'){
        cublasDgemm(handle,CUBLAS_OP_T,CUBLAS_OP_N,N,N,N,&alpha,result,N,result,N,&beta,matrix,N);
    }
    else if(uplo == 'l'){
        cublasDgemm(handle,CUBLAS_OP_N,CUBLAS_OP_T,N,N,N,&alpha,result,N,result,N,&beta,matrix,N);
    }
    cudaDeviceSynchronize();
    //    printMatrix_gpu(matrix,N);
    matrixDiagonalizeAndScale<<<dim3(N/B,N/B),dim3(B,B)>>>(matrix, N, uplo, 1.0,0);
    cudaDeviceSynchronize();
    // printMatrix_gpu(matrix,N);
}

__global__ void matrixDiagonalizeAndScale(double * matrix, int ld, char uplo, double alpha, double beta){
    int col = threadIdx.x+blockIdx.x*blockDim.x;
    int row = threadIdx.y+blockIdx.y*blockDim.y;
    if(uplo == 'u'){
        if(row<col+1){
            matrix[col*ld+row] = int(matrix[col*ld+row]*alpha+beta);
        }
        else{
            matrix[col*ld+row] = int(0.0);
        }
    }
    else{
        if(col<row+1){
            matrix[col*ld+row] = int(matrix[col*ld+row]*alpha+beta);
        }
        else{
            matrix[col*ld+row] = int(0.0);
        }
    } 
}


__global__ void resultVerify_gpu_help(double * realResult, double * testResult,double * diff, int N){
  int col = threadIdx.x+blockIdx.x*blockDim.x;
  int row = threadIdx.y+blockIdx.y*blockDim.y;
  diff[col*N+row] = testResult[col*N+row] - realResult[col*N+row];
}

bool resultVerify_gpu(double * realResult, double * testResult, int N, int B){
  //printMatrix_gpu(testResult,N);
  double * diff;
  cudaMalloc((void**)&diff,N*N*sizeof(double));
  resultVerify_gpu_help<<<dim3(N/B,N/B),dim3(B,B)>>>(realResult,testResult,diff,N);
    
  double * diff_host = new double[N*N]();
  cudaMemcpy(diff_host,diff,N*N*sizeof(double),cudaMemcpyDeviceToHost);
 
  for(int i=0;i<N;i++){
    for(int j=0;j<N;j++){
      if(abs(diff_host[i*N+j])>1e-3){
	//  cout<<"diff:"<<abs(diff_host[i*N+j])<<endl;
	return false;
      }
    }
  }
  return true;
}


void printMatrix_host(double * matrix_host, int N){
  for(int i=0;i<N;i++){
    for(int j=0;j<N;j++){
      cout.width(5);
      cout.setf(ios::left);
      cout<<matrix_host[j*N+i];
    }
    cout<<endl;
  }
  cout<<endl;
}

void printMatrix_gpu(double * matrix_gpu, int N){
  double * matrix_host = new double[N*N]();
  cudaMemcpy(matrix_host,matrix_gpu,sizeof(double)*N*N,cudaMemcpyDeviceToHost);
  printMatrix_host(matrix_host,N);
}
